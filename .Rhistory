act.fct= ,learningrate=0.01, linear.output=F)
plot(irisNN)
irisNN <- neuralnet(Speciesversicolor+Speciesvirginica~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,
cleanedIris, hidden=c(8,4),algorithm="rprop+",
act.fct= ,learningrate=0.1, linear.output=F)
plot(irisNN)
irisNN <- neuralnet(Speciesversicolor+Speciesvirginica~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,
cleanedIris, hidden=c(8,4),algorithm="rprop+",
act.fct= ,learningrate=0.01, linear.output=F)
plot(irisNN)
irisNN <- neuralnet(Speciesversicolor+Speciesvirginica~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,
cleanedIris, hidden=c(8,4),algorithm="rprop+",
act.fct= ,learningrate=0.0001, linear.output=F)
plot(irisNN)
irisNN <- neuralnet(Speciesversicolor+Speciesvirginica~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,
cleanedIris, hidden=c(8,4),algorithm="rprop+",
learningrate=0.1, linear.output=F)
plot(irisNN)
irisNN <- neuralnet(Speciesversicolor+Speciesvirginica~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,
cleanedIris, hidden=c(8,4),algorithm="rprop+",
learningrate=0.1, linear.output=F)
plot(irisNN)
irisNN <- neuralnet(Speciesversicolor+Speciesvirginica~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,
cleanedIris, hidden=1,algorithm="rprop+",
learningrate=0.001, linear.output=F)
plot(irisNN)
irisNN <- neuralnet(Speciesversicolor+Speciesvirginica~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,
cleanedIris, hidden=c(8,5),algorithm="rprop+",
learningrate=0.01, linear.output=F)
plot(irisNN)
irisNN <- neuralnet(Speciesversicolor+Speciesvirginica~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,
cleanedIris, hidden=c(10,7,4),algorithm="rprop+",
learningrate=0.01, linear.output=F)
plot(irisNN)
irisNN <- neuralnet(Speciesversicolor+Speciesvirginica~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,
cleanedIris, hidden=c(10,7,4),algorithm="rprop+",
learningrate=0.0001, linear.output=F)
plot(irisNN)
irisNN <- neuralnet(Speciesversicolor+Speciesvirginica~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,
cleanedIris, hidden=c(10,7,4),algorithm="rprop+",
learningrate=0.01, linear.output=F)
plot(irisNN)
irisNN <- neuralnet(Speciesversicolor+Speciesvirginica~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,
cleanedIris, hidden=c(10,7,4),algorithm="rprop+",
learningrate=0.0001, linear.output=F)
plot(irisNN)
irisNN <- neuralnet(Speciesversicolor+Speciesvirginica~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,
cleanedIris, hidden=c(10,7,4),algorithm="rprop+",
learningrate=0.0001, linear.output=F)
plot(irisNN)
irisNN <- neuralnet(Speciesversicolor+Speciesvirginica~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,
cleanedIris, hidden=1,algorithm="rprop+",
learningrate=0.01, linear.output=F)
plot(irisNN)
iris
max(cleanedIris)
cleanedIris
irisNN <- neuralnet(Speciesversicolor+Speciesvirginica~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,
cleanedIris, hidden=1,algorithm="rprop+",
learningrate=0.01, linear.output=F)
plot(irisNN)
compute(irisNN,c(0.5,0.4,0.1,0.9))
?compute
compute(irisNN,c(0.2,0.5,0.4,0.1,0.9))
compute(irisNN,mas.matrix(c(0.5,0.4,0.1,0.9)))
compute(irisNN,as.matrix(c(0.5,0.4,0.1,0.9)))
learnr::run_tutorial("lab4","NRES746labs")
knitr::opts_chunk$set(echo = TRUE)
setwd("~/.")
library(dplyr)
library(neuralnet)
library(stringr)
library(LaplacesDemon)
head(iris)
summary(iris$Species) #this is our output layer, or what we are predicting
cleanedIris <- model.matrix(~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width + Species,data=iris)
cleanedIris <- cleanedIris/max(cleanedIris)
head(cleanedIris)
irisNN <- neuralnet(Speciesversicolor+Speciesvirginica~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,
cleanedIris, hidden=1,algorithm="rprop+",
learningrate=0.01, linear.output=F)
plot(irisNN)
df <- read.csv('/Users/keaneflynn/Downloads/R-Program/NRES_746/NeuralNetworks/nhseData.csv')
df <- df[!duplicated(df[,c("Name", "Species")]),]
head(df)
df %>% filter(Name=="Donut") #This is my pup
df$Age.Group <- str_remove_all(df$Age.Group," \\(.*?\\)")
df$Age.Group <- str_replace_all(df$Age.Group,"Juvenile|Kitten|Puppy|Unweaned","juvenile")
df$Age.Group <- str_replace_all(df$Age.Group,"Adult Cat|Adult Dog|Adult|Young adult","adult")
df$Age.Group <- str_replace_all(df$Age.Group,"Senior","senior")
df$Current.Weight <- as.numeric(str_extract_all(df$Current.Weight,"\\d{0,3}.\\d{1,2}"))
df$Sex <- str_replace_all(df$Sex,"Male","male")
df$Sex <- str_replace_all(df$Sex,"Female","female")
df$Sex <- str_replace_all(df$Sex,"Unknown","unknown")
df$Species <- str_replace_all(df$Species,"Bird, Unspecified|Chicken, Domestic|Conure, Unspecified|Parakeet, Common|Parakeet, Unspecified","bird")
df$Species <- str_replace_all(df$Species,"Lizard, Unspecified|Snake, Python Unspecified|Tortoise, Unspecified|Turtle, Red-Eared Slider|Turtle, Unspecified","reptile")
df$Species <- str_replace_all(df$Species,"Chinchilla|Ferret|Guinea Pig|Hamster, Dwarf|Hamster, Unspecified|Hedgehog|Mouse, Little Pocket|Mouse, Unspecified|Rabbit, Domestic|Rat, Unspecified|Sugar Glider","small_mammal")
df$Species <- str_replace_all(df$Species,"Dog","dog")
df$Species <- str_replace_all(df$Species,"Cat","cat")
df <- dplyr::rename(df, c(species = Species,
breed = Primary.Breed,
sex = Sex,
age = Age..Months.,
age_group = Age.Group,
weight_lbs = Current.Weight,
custody_period = Days.in.Custody)) %>%
select(species,sex,age_group,age,weight_lbs,custody_period) %>%
na.omit()
rownames(df) <- 1:nrow(df)
df_check <- df[-c(2860,755,5856,4709,5189),] #removing some outliers that are annoying me
head(df_check)
formatted_df <- model.matrix(~ species + sex + age_group + age + weight_lbs + custody_period,data=df_check)
maxVal <- max(formatted_df) #variable stored to unscale our dataframe, important for later
formatted_df <- formatted_df/maxVal
head(formatted_df)
set.seed(70) #sample pseudo-randomly for replication sake
sampleSize <- round(nrow(formatted_df)*0.8) #split up dataset 80/20
rowIndex <- sample(seq(nrow(formatted_df)),size=sampleSize)
training_data <- formatted_df[rowIndex,] #what will be passed into the model training function
testing_data <-  formatted_df[-rowIndex,]
groundtruth_data <- testing_data[,11]*maxVal
nn <- neuralnet(custody_period~speciesdog+speciesreptile+speciessmall_mammal+sexmale+sexunknown+age_groupjuvenile+age_groupsenior+age+weight_lbs,
training_data,
hidden=c(5,2), learningrate=0.01,
linear.output=T)
nn$result.matrix
plot(nn)
computedNN <- compute(nn,testing_data)$net.result #this is the forward pass or inference phase of the network
head(computedNN)
predicted_values <- computedNN * maxVal #Here we are taking the output from our neuralnet and unscaling it to make the outputs usable
head(predicted_values)
plot(groundtruth_data, predicted_values, col='red', pch=1,
xlim = c(0,200), ylim = c(0,200), cex=0.75,
ylab = "predicted days in shelter", xlab = "actual days in shelter",
main = "NHSE Custody Period Prediction")
abline(a=0,b=1) #This b=1 line shows what the data would look like in an idea scenario
sum((groundtruth_data - predicted_values)^2)/length(groundtruth_data) #Sum of squared errors normalized by length of the dataset
hist(df$custody_period,breaks=50)
df_check <- df_check %>% filter(custody_period <= 40)
hist(df_check$custody_period,breaks=50)
formatted_df <- model.matrix(~ species + sex + age_group + age + weight_lbs + custody_period,data=df_check)
maxVal <- max(formatted_df) #variable stored to unscale our dataframe, important for later
formatted_df <- formatted_df/maxVal
head(formatted_df)
set.seed(70) #sample pseudo-randomly for replication sake
sampleSize <- round(nrow(formatted_df)*0.8) #split up dataset 80/20
rowIndex <- sample(seq(nrow(formatted_df)),size=sampleSize)
training_data <- formatted_df[rowIndex,] #what will be passed into the model training function
testing_data <-  formatted_df[-rowIndex,]
groundtruth_data <- testing_data[,11]*maxVal
nn <- neuralnet(custody_period~speciesdog+speciesreptile+speciessmall_mammal+sexmale+sexunknown+age_groupjuvenile+age_groupsenior+age+weight_lbs,
training_data,
hidden=c(5,2), learningrate=0.01,
linear.output=T)
#nn$result.matrix #new neural network weights and biases
plot(nn)
computedNN <- compute(nn,testing_data)$net.result #this is the forward pass or inference phase of the network
predicted_values <- computedNN * maxVal #Here we are taking the output from our neuralnet and unscaling it to make the outputs usable
head(predicted_values)
plot(groundtruth_data, predicted_values, col='red', pch=1,
xlim = c(0,45), ylim = c(0,45), cex=0.75,
ylab = "predicted days in shelter", xlab = "actual days in shelter",
main = "NHSE Custody Period Prediction")
abline(a=0,b=1) #This b=1 line shows what the data would look like in an idea scenario
sum((groundtruth_data - predicted_values)^2)/length(groundtruth_data) #Sum of squared errors normalized by length of the dataset
testing_data
head(testing_data)
str(testing_data)
testing_data[1]
testing_data[2]
testing_data[,1]
head(testing_data[,1])
testing_data[3]
testing_data[5]
testing_data[1,]
computedNN <- predict.nn(nn,testing_data)$net.result #this is the forward pass or inference phase of the network
testPred <- c(0.0038,0.00383,0,0,0,0,0,0.00383,0.721,0.097)
testRunNN <- compute(nn, testPred)
testPred <- data.frame(c(0.0038,0.00383,0,0,0,0,0,0.00383,0.721,0.097))
testRunNN <- compute(nn, testPred)
speciesdog = c(1,0,0)
speciesreptile = c(0,0,0)
speciessmall_mammal = c(0,1,0)
sexmale = c(1,0,0)
sexunknown = c(0,1,0)
age_groupsenior = c(0,1,0)
age = c(3,10,12)
weight_lbs = c(15,1,8)
testPred <- data.frame(speciesdog,speciesreptile,speciessmall_mammal,
sexmale,sexunknown,age_groupjuvenile,age_groupsenior,
age,weight_lbs)
age_groupjuvenile = c(1,0,1)
age_groupsenior = c(0,1,0)
age = c(3,10,12)
weight_lbs = c(15,1,8)
testPred <- data.frame(speciesdog,speciesreptile,speciessmall_mammal,
sexmale,sexunknown,age_groupjuvenile,age_groupsenior,
age,weight_lbs)
testPred
testPred <- testPred/maxVal
testPred
testRunNN <- compute(nn, testPred)
testRunNN
testRunNN <- compute(nn, testPred)$net.result * maxVal
testRunNN
head(testPred)
testRunNN <- round(compute(nn, testPred)$net.result * maxVal) #run the neural net prediction and rescaling it for usable results
testRunNN
computedNN <- compute(nn,testing_data)$net.result #this is the forward pass or inference phase of the network
predicted_values <- computedNN * maxVal #Here we are taking the output from our neuralnet and unscaling it to make the outputs usable
head(predicted_values)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/.")
library(dplyr)
library(neuralnet)
library(stringr)
library(LaplacesDemon)
head(iris)
summary(iris$Species) #this is our output layer, or what we are predicting
cleanedIris <- model.matrix(~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width + Species,data=iris)
cleanedIris <- cleanedIris/max(cleanedIris)
head(cleanedIris)
irisNN <- neuralnet(Speciesversicolor+Speciesvirginica~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,
cleanedIris, hidden=1,algorithm="rprop+",
learningrate=0.01, linear.output=F)
plot(irisNN)
df <- read.csv('/Users/keaneflynn/Downloads/R-Program/NRES_746/NeuralNetworks/nhseData.csv')
df <- df[!duplicated(df[,c("Name", "Species")]),]
head(df)
df %>% filter(Name=="Donut") #This is my pup
df$Age.Group <- str_remove_all(df$Age.Group," \\(.*?\\)")
df$Age.Group <- str_replace_all(df$Age.Group,"Juvenile|Kitten|Puppy|Unweaned","juvenile")
df$Age.Group <- str_replace_all(df$Age.Group,"Adult Cat|Adult Dog|Adult|Young adult","adult")
df$Age.Group <- str_replace_all(df$Age.Group,"Senior","senior")
df$Current.Weight <- as.numeric(str_extract_all(df$Current.Weight,"\\d{0,3}.\\d{1,2}"))
df$Sex <- str_replace_all(df$Sex,"Male","male")
df$Sex <- str_replace_all(df$Sex,"Female","female")
df$Sex <- str_replace_all(df$Sex,"Unknown","unknown")
df$Species <- str_replace_all(df$Species,"Bird, Unspecified|Chicken, Domestic|Conure, Unspecified|Parakeet, Common|Parakeet, Unspecified","bird")
df$Species <- str_replace_all(df$Species,"Lizard, Unspecified|Snake, Python Unspecified|Tortoise, Unspecified|Turtle, Red-Eared Slider|Turtle, Unspecified","reptile")
df$Species <- str_replace_all(df$Species,"Chinchilla|Ferret|Guinea Pig|Hamster, Dwarf|Hamster, Unspecified|Hedgehog|Mouse, Little Pocket|Mouse, Unspecified|Rabbit, Domestic|Rat, Unspecified|Sugar Glider","small_mammal")
df$Species <- str_replace_all(df$Species,"Dog","dog")
df$Species <- str_replace_all(df$Species,"Cat","cat")
df <- dplyr::rename(df, c(species = Species,
breed = Primary.Breed,
sex = Sex,
age = Age..Months.,
age_group = Age.Group,
weight_lbs = Current.Weight,
custody_period = Days.in.Custody)) %>%
select(species,sex,age_group,age,weight_lbs,custody_period) %>%
na.omit()
rownames(df) <- 1:nrow(df)
df_check <- df[-c(2860,755,5856,4709,5189),] #removing some outliers that are annoying me
head(df_check)
formatted_df <- model.matrix(~ species + sex + age_group + age + weight_lbs + custody_period,data=df_check)
maxVal <- max(formatted_df) #variable stored to unscale our dataframe, important for later
formatted_df <- formatted_df/maxVal
head(formatted_df)
set.seed(70) #sample pseudo-randomly for replication sake
sampleSize <- round(nrow(formatted_df)*0.8) #split up dataset 80/20
rowIndex <- sample(seq(nrow(formatted_df)),size=sampleSize)
training_data <- formatted_df[rowIndex,] #what will be passed into the model training function
testing_data <-  formatted_df[-rowIndex,]
groundtruth_data <- testing_data[,11]*maxVal
nn <- neuralnet(custody_period~speciesdog+speciesreptile+speciessmall_mammal+sexmale+sexunknown+age_groupjuvenile+age_groupsenior+age+weight_lbs,
training_data,
hidden=c(5,2), learningrate=0.01,
linear.output=T)
nn$result.matrix
plot(nn)
computedNN <- compute(nn,testing_data)$net.result #this is the forward pass or inference phase of the network
head(computedNN)
predicted_values <- computedNN * maxVal #Here we are taking the output from our neuralnet and unscaling it to make the outputs usable
head(predicted_values)
plot(groundtruth_data, predicted_values, col='red', pch=1,
xlim = c(0,200), ylim = c(0,200), cex=0.75,
ylab = "predicted days in shelter", xlab = "actual days in shelter",
main = "NHSE Custody Period Prediction")
abline(a=0,b=1) #This b=1 line shows what the data would look like in an idea scenario
sum((groundtruth_data - predicted_values)^2)/length(groundtruth_data) #Sum of squared errors normalized by length of the dataset
hist(df$custody_period,breaks=50)
df_check <- df_check %>% filter(custody_period <= 40)
hist(df_check$custody_period,breaks=50)
formatted_df <- model.matrix(~ species + sex + age_group + age + weight_lbs + custody_period,data=df_check)
maxVal <- max(formatted_df) #variable stored to unscale our dataframe, important for later
formatted_df <- formatted_df/maxVal
head(formatted_df)
set.seed(70) #sample pseudo-randomly for replication sake
sampleSize <- round(nrow(formatted_df)*0.8) #split up dataset 80/20
rowIndex <- sample(seq(nrow(formatted_df)),size=sampleSize)
training_data <- formatted_df[rowIndex,] #what will be passed into the model training function
testing_data <-  formatted_df[-rowIndex,]
groundtruth_data <- testing_data[,11]*maxVal
nn <- neuralnet(custody_period~speciesdog+speciesreptile+speciessmall_mammal+sexmale+sexunknown+age_groupjuvenile+age_groupsenior+age+weight_lbs,
training_data,
hidden=c(5,2), learningrate=0.01,
linear.output=T)
#nn$result.matrix #new neural network weights and biases
plot(nn)
computedNN <- compute(nn,testing_data)$net.result #this is the forward pass or inference phase of the network
predicted_values <- computedNN * maxVal #Here we are taking the output from our neuralnet and unscaling it to make the outputs usable
head(predicted_values)
plot(groundtruth_data, predicted_values, col='red', pch=1,
xlim = c(0,45), ylim = c(0,45), cex=0.75,
ylab = "predicted days in shelter", xlab = "actual days in shelter",
main = "NHSE Custody Period Prediction")
abline(a=0,b=1) #This b=1 line shows what the data would look like in an idea scenario
sum((groundtruth_data - predicted_values)^2)/length(groundtruth_data) #Sum of squared errors normalized by length of the dataset
speciesdog = c(1,0,0)
speciesreptile = c(0,0,0)
speciessmall_mammal = c(0,1,0)
sexmale = c(1,0,0)
sexunknown = c(0,1,0)
age_groupjuvenile = c(1,0,1)
age_groupsenior = c(0,1,0)
age = c(3,10,12)
weight_lbs = c(15,1,8)
testPred <- data.frame(speciesdog,speciesreptile,speciessmall_mammal,
sexmale,sexunknown,age_groupjuvenile,age_groupsenior,
age,weight_lbs)
testPred <- testPred/maxVal
head(testPred)
testRunNN <- round(compute(nn, testPred)$net.result * maxVal) #run the neural net prediction and rescaling it for usable results
testRunNN
geometry
package_version(Geometry)
library(geometry)
package_version(geometry)
package_version(Geometry)
packageVersion("geometry")
packageVersion("stat")
packageVersion("stats")
?lag
?par
install.packages("terra")
library(terra)
library(terra)
library(dplyr)
library(lubridate)
library(tidyr)
library(ggplot2)
library(stringr)
#setwd("~/code/SummitLake_Thesis/") #setwd for Linux machine
setwd("~/Downloads/SummitLake_Thesis/") #setwd for macbook
mg4 <- read.csv2("data/hydrology/hoboLogger_mg4.csv", sep=",")
mg4$Water.Level....ft. <- as.numeric(mg4$Water.Level....ft.)
mg4$Water.Level....ft. <- mg4$Water.Level....ft. + 0.4327 #0.5855
write.csv2(mg4, file="data/hydrology/hoboLogger_mg4_corrected.csv")
mg5 <- read.csv2("data/hydrology/hoboLogger_mg5.csv", sep=",") #no corrections needed
mg5$Water.Level....ft. <- as.numeric(mg5$Water.Level....ft.)
write.csv2(mg5, file="data/hydrology/hoboLogger_mg5_corrected.csv")
sc1 <- read.csv2("data/hydrology/hoboLogger_sc1.csv", sep=",") #no corrections needed
sc1$Water.Level....ft. <- as.numeric(sc1$Water.Level....ft.)
write.csv2(sc1, "data/hydrology/hoboLogger_sc1_corrected.csv")
sc2 <- read.csv2("data/hydrology/hoboLogger_sc2.csv", sep=",")
sc2$Water.Level....ft. <- as.numeric(sc2$Water.Level....ft.)
sc2$Water.Level....ft. <- sc2$Water.Level....ft. + 0.0819
write.csv2(sc2, "data/hydrology/hoboLogger_sc2_corrected.csv")
##Global Variables###
date_range <- c(as.Date("2022-05-12"),
as.Date("2022-11-16"))
month_dates <- data.frame(dates=c(as.Date("2022-06-01"), as.Date("2022-07-01"),
as.Date("2022-08-01"), as.Date("2022-09-01"),
as.Date("2022-10-01"), as.Date("2022-11-01")))
sample_dates <- data.frame(x=c(as.Date("2022-08-09"), as.Date("2022-08-16"), as.Date("2022-08-24"),
as.Date("2022-9-07"), as.Date("2022-10-04"), as.Date("2022-11-01")),
y=28,
xend=c(as.Date("2022-08-09"), as.Date("2022-08-16"), as.Date("2022-08-24"),
as.Date("2022-9-07"), as.Date("2022-10-04"), as.Date("2022-11-01")),
yend=18)
###Functions###
minidot_temp <- function(dataset, sitename, start_date, end_date) {
data <- read.delim2(dataset, skip=7, header=T,
sep=",")[-1,c(3,5,6)] %>%
rename(pacific_standard_time=Pacific.Standard.Time,
water_temp_c=Temperature,
dissolved_oxygen_mgL=Dissolved.Oxygen)
data$water_temp_c <- as.double(data$water_temp_c)
data$dissolved_oxygen_mgL <-as.double(data$dissolved_oxygen_mgL)
data$date <- as.Date(data$pacific_standard_time)
data$time_pst <- format(as.POSIXct(data$pacific_standard_time), format = "%H:%M:%S")
data <- select(data, date, time_pst, water_temp_c, dissolved_oxygen_mgL) %>%
filter(date >= start_date, date <= end_date) %>%
group_by(date) %>%
mutate(daily_mean_temp = mean(water_temp_c),
daily_mean_DO = mean(dissolved_oxygen_mgL),
sd_temp = sd(water_temp_c),
sd_DO = sd(dissolved_oxygen_mgL),
low_range_temp = daily_mean_temp - sd_temp,
high_range_temp = daily_mean_temp + sd_temp,
low_range_DO = daily_mean_DO - sd_DO,
high_range_DO = daily_mean_DO + sd_DO)
data <- subset(data, water_temp_c < high_range_temp & water_temp_c > low_range_temp)
data <- subset(data, dissolved_oxygen_mgL < high_range_DO & dissolved_oxygen_mgL > low_range_DO)
data <- select(data, date, time_pst, water_temp_c, dissolved_oxygen_mgL, daily_mean_temp)
g <- ggplot(data, aes(date, daily_mean_temp)) +
geom_line() +
ggtitle(sitename) +
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_date(limits=date_range) +
geom_segment(data=sample_dates, aes(x=x, y=y, xend=xend, yend=yend),
arrow=arrow(length=unit(0.3,"cm")),
col="#36454f") +
geom_vline(data=month_dates, aes(xintercept=dates),
linetype="dotted") +
xlab("Date") +
ylab("Water Temperature (C)") +
ylim(0,30) +
geom_hline(aes(yintercept=20, linetype="Bioenergetic Threshold \n(Dickerson & Vinyard 1999)"),
colour="red") +
scale_linetype_manual(name="", values=2,
guide=guide_legend(override.aes=list(color="red")))
return(g)
}
minidot_do <- function(dataset, sitename, start_date, end_date) {
data <- read.delim2(dataset, skip=7, header=T,
sep=",")[-1,c(3,5,6)] %>%
rename(pacific_standard_time=Pacific.Standard.Time,
water_temp_c=Temperature,
dissolved_oxygen_mgL=Dissolved.Oxygen)
data$water_temp_c <- as.double(data$water_temp_c)
data$dissolved_oxygen_mgL <-as.double(data$dissolved_oxygen_mgL)
data$date <- as.Date(data$pacific_standard_time)
data$time_pst <- format(as.POSIXct(data$pacific_standard_time), format = "%H:%M:%S")
data <- select(data, date, time_pst, water_temp_c, dissolved_oxygen_mgL) %>%
filter(date >= start_date, date <= end_date) %>%
group_by(date) %>%
mutate(daily_mean_temp = mean(water_temp_c),
daily_mean_DO = mean(dissolved_oxygen_mgL),
sd_temp = sd(water_temp_c),
sd_DO = sd(dissolved_oxygen_mgL),
low_range_temp = daily_mean_temp - sd_temp,
high_range_temp = daily_mean_temp + sd_temp,
low_range_DO = daily_mean_DO - sd_DO,
high_range_DO = daily_mean_DO + sd_DO)
data <- subset(data, water_temp_c < high_range_temp & water_temp_c > low_range_temp)
data <- subset(data, dissolved_oxygen_mgL < high_range_DO & dissolved_oxygen_mgL > low_range_DO)
data <- select(data, date, time_pst, water_temp_c, dissolved_oxygen_mgL, daily_mean_DO)
g <- ggplot(data, aes(date, daily_mean_DO)) +
geom_line() +
ggtitle(sitename) +
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_date(limits=date_range) +
geom_segment(data=sample_dates, aes(x=x, y=12.5, xend=xend, yend=11),
arrow=arrow(length=unit(0.3,"cm")),
col="#36454f") +
geom_vline(data=month_dates, aes(xintercept=dates),
linetype="dotted") +
xlab("Date") +
ylab("Dissolved Oxygen (mg/L)") +
ylim(3,13) +
geom_hline(aes(yintercept=5, linetype="DO Threshold \n(Doudoroff & Shumway 1970)"),
colour="red") +
scale_linetype_manual(name="", values=2,
guide=guide_legend(override.aes=list(color="red")))
return(g)
}
iButton_temp <- function(dataset, sitename, start_date, end_date){
data <- read.csv2(dataset,
skip = 20, header = F, sep = ",")[,c(1,2,4)]
colnames(data) <- c("date", "time_pst", "air_temp_c")
data$date <- mdy(data$date)
data$time_pst <- parse_date_time(data$time_pst, '%I:%M:%S %p')
data$time_pst <- format(as.POSIXct(data$time_pst), format = "%H:%M:%S")
data$air_temp_c <- as.double(data$air_temp_c)
data <- select(data, date, time_pst, air_temp_c) %>%
filter(date >= start_date, date <= end_date)
g <- ggplot(data, aes(date, air_temp_c)) +
geom_boxplot(aes(group=date)) +
ggtitle(sitename) +
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_date(limits=date_range) +
geom_vline(data=month_dates, aes(xintercept=dates),
linetype="dotted")
return(g)
}
hoboLogger <- function(dataset, sitename, start_date, end_date){
data <- read.csv2(dataset)[-1,c(3,6,7)]
data$Date.Time..PST.PDT. <- parse_date_time(data$Date.Time..PST.PDT., '%m/%d/%Y %H/%M/%S')
data$date <- as.Date(data$Date.Time..PST.PDT.)
data$time_pst <- format(as.POSIXct(data$Date.Time..PST.PDT.), format = "%H:%M:%S")
data$Ch..3...Temperature.....F.. <- as.double(data$Ch..3...Temperature.....F..)
data$Ch..3...Temperature.....F.. <- ((data$Ch..3...Temperature.....F.. - 32)*(5/9))
#data$Water.Level....ft. <- as.double(data$Water.Level....ft.)
data$Water.Level....ft. <- data$Water.Level....ft. * 30.48
data <- select(data, date, time_pst, Ch..3...Temperature.....F.., Water.Level....ft.)
data <- rename(data, date=date, time_pst=time_pst, water_temp_c=Ch..3...Temperature.....F..,
water_level_cm=Water.Level....ft.) %>%
filter(date >= start_date, date <= end_date) %>%
group_by(date) %>%
mutate(daily_mean_water_level = mean(water_level_cm),
sd_water_level = sd(water_level_cm),
high_range_level = daily_mean_water_level + sd_water_level,
low_range_level = daily_mean_water_level - sd_water_level) %>%
ungroup()
data <- subset(data, water_level_cm < high_range_level & water_level_cm > low_range_level)
data <- select(data, date, time_pst, water_level_cm, daily_mean_water_level)
g <- ggplot(data, aes(date, daily_mean_water_level)) +
geom_line() + #aes(group=date)
geom_hline(aes(yintercept=as.numeric(data[1,3])), colour="blue") +
ggtitle(sitename) +
xlab("Date") +
ylab("Stage measurement (cm)") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_date(limits=date_range) +
geom_vline(data=month_dates, aes(xintercept=dates),
linetype="dotted")
return(g)
}
hoboLogger(dataset="data/hydrology/hoboLogger_mg4_corrected.csv", sitename="Mahogany Creek Site 4: Water Level (cm)",
start_date="2022-05-12", end_date="2022-08-30")#5/12/2022-11/2/2022
